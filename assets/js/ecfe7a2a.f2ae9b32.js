"use strict";(self.webpackChunkguides=self.webpackChunkguides||[]).push([[939],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),c=u(r),d=o,f=c["".concat(i,".").concat(d)]||c[d]||m[d]||s;return r?n.createElement(f,l(l({ref:t},p),{},{components:r})):n.createElement(f,l({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,l=new Array(s);l[0]=d;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a[c]="string"==typeof e?e:o,l[1]=a;for(var u=2;u<s;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5609:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const s={sidebar_position:3},l="Foundation",a={unversionedId:"programming/java/jmeter/foundation",id:"programming/java/jmeter/foundation",title:"Foundation",description:"This section describes the core concepts of JMeter.",source:"@site/docs/programming/java/jmeter/foundation.md",sourceDirName:"programming/java/jmeter",slug:"/programming/java/jmeter/foundation",permalink:"/guides/docs/programming/java/jmeter/foundation",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/guides/docs/programming/java/jmeter/installation"},next:{title:"Load Testing Exercise",permalink:"/guides/docs/programming/java/jmeter/exercise"}},i={},u=[{value:"Test Plan",id:"test-plan",level:2},{value:"Thread Group",id:"thread-group",level:2},{value:"Samplers",id:"samplers",level:3},{value:"Logic Controllers",id:"logic-controllers",level:3},{value:"Listeners",id:"listeners",level:2},{value:"Timers",id:"timers",level:2},{value:"Assertions",id:"assertions",level:2},{value:"Config Elements",id:"config-elements",level:2},{value:"Pre-Processor Elements",id:"pre-processor-elements",level:2},{value:"Post-Processor Elements",id:"post-processor-elements",level:2},{value:"Execution Order",id:"execution-order",level:2},{value:"Scoping Rules",id:"scoping-rules",level:2}],p={toc:u},c="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"foundation"},"Foundation"),(0,o.kt)("p",null,"This section describes the core concepts of JMeter."),(0,o.kt)("h2",{id:"test-plan"},"Test Plan"),(0,o.kt)("p",null,"A collection of steps."),(0,o.kt)("h2",{id:"thread-group"},"Thread Group"),(0,o.kt)("p",null,"The number of threads JMeter uses to execute tests, which are independent\nof each other."),(0,o.kt)("p",null,"Thread Group properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Number of Threads: Number of users"),(0,o.kt)("li",{parentName:"ul"},"Ramp-up Period: The time period to start all the threads"),(0,o.kt)("li",{parentName:"ul"},"Loop Count: Number of times to repeat the thread group")),(0,o.kt)("p",null,"A Thread Group has controllers:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Samplers: Send requests to the server"),(0,o.kt)("li",{parentName:"ul"},"Logic Controllers: Determine when to send requests"),(0,o.kt)("li",{parentName:"ul"},"Test Fragments")),(0,o.kt)("h3",{id:"samplers"},"Samplers"),(0,o.kt)("p",null,"Samplers are requests sent to the server. When there are similar\nconfigurations for samples, you can use the Default Sampler configuration."),(0,o.kt)("h3",{id:"logic-controllers"},"Logic Controllers"),(0,o.kt)("p",null,"Logic Controllers control the Samplers, dictating when to send a request or\nchange the order of the samplers."),(0,o.kt)("h2",{id:"listeners"},"Listeners"),(0,o.kt)("p",null,"Listeners display statistics of your test plan."),(0,o.kt)("h2",{id:"timers"},"Timers"),(0,o.kt)("p",null,"Timers mimic user delay by introducing waiting time and can also be used to\nprevent overwhelming your server."),(0,o.kt)("h2",{id:"assertions"},"Assertions"),(0,o.kt)("p",null,"Assertions define expectations for the results."),(0,o.kt)("h2",{id:"config-elements"},"Config Elements"),(0,o.kt)("p",null,"Config Elements can add or modify requests."),(0,o.kt)("h2",{id:"pre-processor-elements"},"Pre-Processor Elements"),(0,o.kt)("p",null,"Pre-Processor Elements run before a Sampler."),(0,o.kt)("h2",{id:"post-processor-elements"},"Post-Processor Elements"),(0,o.kt)("p",null,"Post-Processor Elements run after a Sampler."),(0,o.kt)("h2",{id:"execution-order"},"Execution Order"),(0,o.kt)("p",null,"In JMeter, each element has a priority:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Configuration Elements"),(0,o.kt)("li",{parentName:"ol"},"Pre-Processors"),(0,o.kt)("li",{parentName:"ol"},"Timers"),(0,o.kt)("li",{parentName:"ol"},"Samplers"),(0,o.kt)("li",{parentName:"ol"},"Post-Processors"),(0,o.kt)("li",{parentName:"ol"},"Assertions"),(0,o.kt)("li",{parentName:"ol"},"Listeners")),(0,o.kt)("h2",{id:"scoping-rules"},"Scoping Rules"),(0,o.kt)("p",null,"Certain elements are hierarchical, such as Listeners, Config Elements,\nPost-Processors, Pre-Processors, Assertions, and Timers. This means that if\nthe parent is a request, it affects that request. If the parent is a\ncontroller, the element is applied to all requests in that controller.\nIf the parent of another controller has that element, it is applied to\nall requests in that controller."))}m.isMDXComponent=!0}}]);